version: "3.8"

services:

  mysql:
    image: mysql/mysql-server:8.0.23
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    networks:
      - cinema-network
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: moviesdb
      MYSQL_ROOT_PASSWORD: secret
    volumes:
      - "./mysql:/docker-entrypoint-initdb.d"
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      - MONGO_INITDB_DATABASE=reviewdb
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=secret
    volumes:
    - "./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro"
    ports:
      - '27017-27019:27017-27019'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/reviewdb --quiet

#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.1
#    container_name: elasticsearch
#    restart: unless-stopped
#    ports:
#      - "9200:9200"
#      - "9300:9300"
#    networks:
#      - cinema-network
#    environment:
#      cluster.name: docker-es-cluster
#      discovery.type: single-node
#      bootstrap.memory_lock: "true"
#      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    healthcheck:
#      test: "curl -f http://localhost:9200 || exit 1"
#      start_period: 30s
#
#  logstash:
#    image: docker.elastic.co/logstash/logstash:7.13.1
#    container_name: logstash
#    restart: unless-stopped
#    ports:
#      - "5044:5044"
#    networks:
#      - cinema-network
#    volumes:
#      - ./logstash/pipeline:/usr/share/logstash/pipeline/
#    depends_on:
#      - elasticsearch
#    healthcheck:
#      test: "curl -f http://localhost:9600 || exit 1"
#      start_period: 30s
#
#  kibana:
#    image: docker.elastic.co/kibana/kibana:7.13.1
#    container_name: kibana
#    restart: unless-stopped
#    ports:
#      - "5601:5601"
#    networks:
#      - cinema-network
#    environment:
#      ELASTICSEARCH_URL: http://elasticsearch:9200
#    depends_on:
#      - elasticsearch
#    healthcheck:
#      test: "curl -f http://localhost:5601 || exit 1"
#      start_period: 30s
#
#  filebeat:
#    build: filebeat
#    container_name: filebeat
#    restart: unless-stopped
#    networks:
#      - cinema-network
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/containers:/usr/share/dockerlogs/data:ro
#    depends_on:
#      - elasticsearch
#      - logstash

  prometheus:
    image: prom/prometheus:v2.27.1
    container_name: prometheus
    restart: unless-stopped
    networks:
      - cinema-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
      start_period: 30s

  grafana:
    image: grafana/grafana:8.0.1
    container_name: grafana
    restart: unless-stopped
    ports:
      - 3000:3000
    networks:
      - cinema-network
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]
      start_period: 30s

  config-server:
    container_name: 'config-server'
    build:
      context: config-server
      dockerfile: Dockerfile
    image: config-server:latest
    ports:
      - 8888:8888
    networks:
      - cinema-network
    volumes:
      - "/Users/beingsuplab/workspace/git/cinema-app-config/:/config/"
    environment:
      spring.cloud.config.server.git.uri: file://config
      eureka.client.serviceUrl.defaultZone: http://eureka-server:8761/eureka
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  eureka-server:
    container_name: 'eureka-server'
    build:
      context: eureka-discovery
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - 8761:8761
    networks:
      - cinema-network
    environment:
      WAIT_HOSTS: config-server:8888
      WAIT_TIMEOUT: 90
      spring.cloud.config.uri: http://config-server:8888
    depends_on:
      - config-server
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  movies-api:
    container_name: 'movies-api'
    build:
      context: movies-api
      dockerfile: Dockerfile
    image: movies-api:latest
    ports:
      - 8081:8081
    networks:
      - cinema-network
    environment:
      WAIT_HOSTS: config-server:8888,eureka-server:8761,mysql:3306
      WAIT_TIMEOUT: 120
      spring.cloud.config.uri: http://config-server:8888
    depends_on:
      - mysql
      - config-server
      - eureka-server
      - reviews-api
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  reviews-api:
    container_name: 'reviews-api'
    build:
      context: reviews-api
      dockerfile: Dockerfile
    image: reviews-api:latest
    ports:
      - 8082:8082
    networks:
      - cinema-network
    environment:
      WAIT_HOSTS: config-server:8888,eureka-server:8761
      WAIT_TIMEOUT: 120
      spring.cloud.config.uri: http://config-server:8888
    depends_on:
      - config-server
      - eureka-server
    healthcheck:
      test: "curl --fail --silent localhost:8082/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  zuul-gateway:
    container_name: 'zuul-gateway'
    build:
      context: zuul-gateway
      dockerfile: Dockerfile
    image: zuul-gateway:latest
    ports:
      - 8762:8762
    networks:
      - cinema-network
    environment:
      WAIT_HOSTS: config-server:8888,eureka-server:8761
      WAIT_TIMEOUT: 90
      spring.cloud.config.uri: http://config-server:8888
    depends_on:
      - config-server
      - eureka-server
    healthcheck:
      test: "curl --fail --silent localhost:8762/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

networks:
  cinema-network:
    driver: bridge